[gd_resource type="VisualShader" load_steps=19 format=3 uid="uid://h2vv27kgph6t"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_imvde"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(1, 1)]
op_type = 0
operator = 4

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_l0xc5"]
source = 2

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_0g0pa"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0.01, 0.01), 2, Vector2(0, 0)]
op_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5fjrn"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_k2vba"]
output_port_for_preview = 0
size = Vector2(1080, 1020)
expression = "    // apply tiling
    vec2 tile_index = floor(uv * tile_count);
    vec2 tile_min = (tile_index / tile_count);
    vec2 tile_max = (tile_index + 1.0) / tile_count;
    noise_value.x = mod(noise_value.x, tile_max.x - tile_min.x) + tile_min.x;
    noise_value.y = mod(noise_value.y, tile_max.y - tile_min.y) + tile_min.y;
	noise = noise_value;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_rcg8m"]
input_name = "time"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_pjxov"]
parameter_name = "TileCount"
default_value_enabled = true
default_value = Vector2(1, 1)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_di7na"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_0eq5j"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_ruvvq"]
parameter_name = "TintColor"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_8wysc"]
parameter_name = "WaveStrength"
default_value_enabled = true
default_value = Vector2(0.005, 0.005)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_xqutw"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_sfsil"]
parameter_name = "Speed"
default_value_enabled = true
default_value = Vector2(0.25, 0.25)

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_8vbhm"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(1, 1), 2, Vector2(0, 0)]
op_type = 1

[sub_resource type="FastNoiseLite" id="FastNoiseLite_fd8ja"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ww0jx"]
seamless = true
noise = SubResource("FastNoiseLite_fd8ja")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_djesv"]
output_port_for_preview = 0
texture = SubResource("NoiseTexture2D_ww0jx")
texture_type = 1

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_8dx8v"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(2, 2), 2, Vector2(-1, -1)]
op_type = 1

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec2 Speed = vec2(0.250000, 0.250000);
uniform sampler2D tex_frg_6 : source_color;
uniform vec2 WaveStrength = vec2(0.005000, 0.005000);
uniform vec2 TileCount = vec2(1.000000, 1.000000);
uniform vec4 TintColor : source_color;



void fragment() {
// Input:2
	float n_out2p0 = TIME;


// Vector2Parameter:4
	vec2 n_out4p0 = Speed;


// Input:3
	vec2 n_out3p0 = UV;


// MultiplyAdd:5
	vec2 n_out5p0 = fma(vec2(n_out2p0), n_out4p0, n_out3p0);


// VectorOp:11
	vec2 n_in11p1 = vec2(1.00000, 1.00000);
	vec2 n_out11p0 = mod(n_out5p0, n_in11p1);


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, n_out11p0);


// MultiplyAdd:7
	vec2 n_in7p1 = vec2(2.00000, 2.00000);
	vec2 n_in7p2 = vec2(-1.00000, -1.00000);
	vec2 n_out7p0 = fma(vec2(n_out6p0.xy), n_in7p1, n_in7p2);


// Vector2Parameter:25
	vec2 n_out25p0 = WaveStrength;


// Input:15
	vec2 n_out15p0 = UV;


// MultiplyAdd:14
	vec2 n_out14p0 = fma(n_out7p0, n_out25p0, n_out15p0);


// Vector2Parameter:20
	vec2 n_out20p0 = TileCount;


// Input:21
	vec2 n_out21p0 = UV;


	vec2 n_out16p0;
// Expression:16
	n_out16p0 = vec2(0.0, 0.0);
	{
		    // apply tiling
		    vec2 tile_index = floor(n_out21p0 * n_out20p0);
		    vec2 tile_min = (tile_index / n_out20p0);
		    vec2 tile_max = (tile_index + 1.0) / n_out20p0;
		    n_out14p0.x = mod(n_out14p0.x, tile_max.x - tile_min.x) + tile_min.x;
		    n_out14p0.y = mod(n_out14p0.y, tile_max.y - tile_min.y) + tile_min.y;
			n_out16p0 = n_out14p0;
	}


	vec4 n_out13p0;
// Texture2D:13
	n_out13p0 = texture(TEXTURE, n_out16p0);


// ColorParameter:24
	vec4 n_out24p0 = TintColor;


// ColorOp:23
	vec3 n_out23p0 = vec3(1.0) - (vec3(1.0) - vec3(n_out13p0.xyz)) * (vec3(1.0) - vec3(n_out24p0.xyz));


// Output:0
	COLOR.rgb = n_out23p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(4820, 1640)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_rcg8m")
nodes/fragment/2/position = Vector2(200, 1640)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_xqutw")
nodes/fragment/3/position = Vector2(200, 1380)
nodes/fragment/4/node = SubResource("VisualShaderNodeVec2Parameter_sfsil")
nodes/fragment/4/position = Vector2(200, 2100)
nodes/fragment/5/node = SubResource("VisualShaderNodeMultiplyAdd_8vbhm")
nodes/fragment/5/position = Vector2(900, 1580)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_djesv")
nodes/fragment/6/position = Vector2(1680, 1380)
nodes/fragment/7/node = SubResource("VisualShaderNodeMultiplyAdd_8dx8v")
nodes/fragment/7/position = Vector2(2100, 1580)
nodes/fragment/11/node = SubResource("VisualShaderNodeVectorOp_imvde")
nodes/fragment/11/position = Vector2(1240, 1520)
nodes/fragment/13/node = SubResource("VisualShaderNodeTexture_l0xc5")
nodes/fragment/13/position = Vector2(4060, 1580)
nodes/fragment/14/node = SubResource("VisualShaderNodeMultiplyAdd_0g0pa")
nodes/fragment/14/position = Vector2(2460, 1580)
nodes/fragment/15/node = SubResource("VisualShaderNodeInput_5fjrn")
nodes/fragment/15/position = Vector2(200, 1860)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_k2vba")
nodes/fragment/16/position = Vector2(2880, 1560)
nodes/fragment/16/size = Vector2(1080, 1020)
nodes/fragment/16/input_ports = "0,3,noise_value;1,3,tile_count;2,3,uv;"
nodes/fragment/16/output_ports = "0,3,noise;"
nodes/fragment/16/expression = "    // apply tiling
    vec2 tile_index = floor(uv * tile_count);
    vec2 tile_min = (tile_index / tile_count);
    vec2 tile_max = (tile_index + 1.0) / tile_count;
    noise_value.x = mod(noise_value.x, tile_max.x - tile_min.x) + tile_min.x;
    noise_value.y = mod(noise_value.y, tile_max.y - tile_min.y) + tile_min.y;
	noise = noise_value;"
nodes/fragment/20/node = SubResource("VisualShaderNodeVec2Parameter_pjxov")
nodes/fragment/20/position = Vector2(200, 2620)
nodes/fragment/21/node = SubResource("VisualShaderNodeInput_di7na")
nodes/fragment/21/position = Vector2(200, 3140)
nodes/fragment/23/node = SubResource("VisualShaderNodeColorOp_0eq5j")
nodes/fragment/23/position = Vector2(4480, 1580)
nodes/fragment/24/node = SubResource("VisualShaderNodeColorParameter_ruvvq")
nodes/fragment/24/position = Vector2(200, 3360)
nodes/fragment/25/node = SubResource("VisualShaderNodeVec2Parameter_8wysc")
nodes/fragment/25/position = Vector2(200, 3760)
nodes/fragment/connections = PackedInt32Array(3, 0, 5, 2, 6, 0, 7, 0, 2, 0, 5, 0, 4, 0, 5, 1, 5, 0, 11, 0, 11, 0, 6, 0, 7, 0, 14, 0, 15, 0, 14, 2, 16, 0, 13, 0, 20, 0, 16, 1, 14, 0, 16, 0, 21, 0, 16, 2, 23, 0, 0, 0, 13, 0, 23, 0, 24, 0, 23, 1, 25, 0, 14, 1)
